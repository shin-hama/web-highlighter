// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    highlights    Highlight[]
    PageOnUser    PageOnUser[]
    Label         Label[]
    Tag           Tag[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// highlight
model Highlight {
    id             String           @id @default(cuid())
    userId         String
    pageId         String
    labelId        String
    content        String
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    page           Page             @relation(fields: [pageId], references: [id], onDelete: Cascade)
    label          Label            @relation(fields: [labelId], references: [id], onDelete: Cascade)
    HighlightOnTag HighlightOnTag[]
}

model Page {
    id         String       @id @default(cuid())
    url        String       @unique
    title      String
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    highlights Highlight[]
    PageOnUser PageOnUser[]
}

// Page・User 間の中間テーブル
// updatedAt を参照することで、ユーザーがいつページをハイライトしたかどうかを判定する
model PageOnUser {
    id        String   @id @default(cuid())
    userId    String
    pageId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
}

model Label {
    id         String      @id @default(nanoid(7))
    name       String?
    color      String
    userId     String
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    highlights Highlight[]
}

model Tag {
    id             String           @id @default(cuid())
    name           String?
    userId         String
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    HighlightOnTag HighlightOnTag[]
}

model HighlightOnTag {
    id          String    @id @default(cuid())
    highlightId String
    tagId       String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    highlight   Highlight @relation(fields: [highlightId], references: [id], onDelete: Cascade)
    tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
}
